__author__ = 'Daniel'

# works on 128 bit blocks

# Rijndael S-box
sbox =  [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67,
        0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59,
        0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7,
        0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1,
        0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05,
        0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83,
        0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29,
        0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
        0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa,
        0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c,
        0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc,
        0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec,
        0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19,
        0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee,
        0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49,
        0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4,
        0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6,
        0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70,
        0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9,
        0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e,
        0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1,
        0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0,
        0x54, 0xbb, 0x16]

# Rijndael Inverted S-box
rsbox = [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3,
        0x9e, 0x81, 0xf3, 0xd7, 0xfb , 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f,
        0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb , 0x54,
        0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b,
        0x42, 0xfa, 0xc3, 0x4e , 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24,
        0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25 , 0x72, 0xf8,
        0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d,
        0x65, 0xb6, 0x92 , 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda,
        0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84 , 0x90, 0xd8, 0xab,
        0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3,
        0x45, 0x06 , 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1,
        0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b , 0x3a, 0x91, 0x11, 0x41,
        0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6,
        0x73 , 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9,
        0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e , 0x47, 0xf1, 0x1a, 0x71, 0x1d,
        0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b ,
        0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0,
        0xfe, 0x78, 0xcd, 0x5a, 0xf4 , 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07,
        0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f , 0x60,
        0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f,
        0x93, 0xc9, 0x9c, 0xef , 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5,
        0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61 , 0x17, 0x2b,
        0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55,
        0x21, 0x0c, 0x7d]

def getSBoxValue(num):
    """Retrieves a given S-Box Value"""
    return sbox[num]

def getSBoxInvert(num):
    """Retrieves a given Inverted S-Box Value"""
    return rsbox[num]




def expand_key(key):
    """
    Generates AES expanded keys based on this source
    http://www.adamberent.com/documents/AESbyExample.pdf


    keylength | number of rounds
    --------------------------
    128 bit   |   10
    196 bit   |   12
    256 bit   |   14

    and this rule:
    new_key_size = 16 * (number of rounds + 1)

    Steps:
    1. ROT WORD
    2. SUB WORD
    3. RCON
    4. EK
    5. K

    Amount of rounds depend on the key size

    key size | expansion algo | key copy | key expansion | expanded key |
    --------------------------------------------------------------------
    16 bytes | 44 rounds      | 4 rounds | 40 rounds     | 176 bytes    |
    24 bytes | 52 rounds      | 6 rounds | 46 rounds     | 208 bytes    |
    32 bytes | 60 rounds      | 8 rounds | 52 rounds     | 240 bytes    |

    Fixed values:
        - Block size: 16 bytes
        - Expanded bytes / Rounds: 4

    CONSTRUCTION OF THE EXPANDED KEY:
    1. The first n bytes are the original key
    2. Each round adds 4 bytes to the expanded key
    3. Except of the first round each round takes the previous rounds 4 bytes as input
    4. Not all functions are called every round. The algoritm only calls all 4 of them according this
        4 Rounds for a 16 byte Key
        6 Rounds for a 24 byte Key
        8 Rounds for a 32 byte Key



    :param key:
    :return:
    """

    # This does a circular shift on 4 bytes similar to the Shift Row Function.
    def rot_word(a, b, c, d):
        return [b, c, d, a]

    # This step applies the S-box value substitution as described in
    # Bytes Sub function to each of the 4  bytes in the argument.
    def sub_word(a, b, c, d):
        return

    # returns a value from a list based on round and key_size
    def rcon(round, key_size):
        rcons = [
            0x01,
            0x02,
            0x04,
            0x08,
            0x10,
            0x20,
            0x40,
            0x80,
            0x1B,
            0x36,
            0x6C,
            0xD8,
            0xAB,
            0x4D,
            0x9A
        ]
        index = (round/key_size)-1
        return rcons[index]


    def ek(offset, expanded_key):
        # EK function returns 4 bytes of the Expanded Key after the specified offset.
        # For example if offset is 0 then EK will return bytes 0,1,2,3 of the Expanded Key
        return expanded_key[offset:offset+4]


    def ek(offset, original_key):
        # K function returns 4 bytes of the Key after the specified offset.
        # For example if offset is 0 then K will return bytes 0,1,2,3 of the Key
        return original_key[offset:offset+4]


    # the algoritm

    expanded_key = []

    # n has a value of 16 for 128-bit keys, 24 for 192-bit keys, and 32 for 256-bit keys
    n = len(key) / 8

    # b has a value of 176 for 128-bit keys, 208 for 192-bit keys, and 240 for 256-bit keys
    # (with 128-bit blocks as in AES, it is correspondingly larger for variants of Rijndael
    # with larger block sizes).
    new_sizes_bytes = {
        16: 176,
        24: 208,
        32: 240
    }
    b = new_sizes_bytes[n]

    # The first n bytes of the expanded key are simply the encryption key
    for i in range(0, n):
        expanded_key.append(key[i])

    # The rcon iteration value i is set to 1
    rcon_iter = 1

    # Until we have b bytes of expanded key, we do the following to generate n more bytes of expanded key:
    while len(expanded_key) < b:
        # We do the following to create 4 bytes of expanded key
        # We create a 4-byte temporary variable: t
        # We assign the value of the previous four bytes in the expanded key to t
        t = expanded_key[-4:-1]
        # We perform the key schedule core on t,
        # with i as the rcon iteration value
        # KEY SCHEDULE CORE

        #Copy the input over to the output.
        output = t
        output = rot_word(output[0], output[1], output[2], output[4])
        for i in range(0, len(output)):
            output[i] = getSBoxValue(output[i])
        output[0] = output[0] ^ rcon(rcon_iter, n)
        rcon_iter += 1


        # We XOR t with the four-byte block n bytes before the new expanded key.
        # This becomes the next four bytes in the expanded key.
        for m in range(4):
            expanded_key.append(expanded_key[-n-m] ^ t[m])

    return expanded_key










